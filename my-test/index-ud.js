const data = require('./train3.json')
const dt = require('./decision-tree.js')
const test = require('./test3.json')
const sr = require('./serialize.js')

// Configuration
var config = {
    trainingSet: data,
    categoryAttr: 'label',
    ignoredAttributes: ['win','f1']
};

const predict = (tree, item) => {
    var attr, value, predicate, pivot;
    while(true) {
        if (tree.category) {
            // only leafs contains predicted category
            return tree.category;
        }
        attr = tree.attribute;
        value = item[attr];
        predicate = tree.predicate;
        pivot = tree.pivot;
        // move to one of subtrees
        if (predicate(value, pivot)) {
            tree = tree.match;
        } else {
            tree = tree.notMatch;
        }
    }
}

const decisionTreeString = `{"root":{"attribute":"f2","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":56,"match":{"attribute":"f2","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":81,"match":{"attribute":"f2","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":96,"match":{"attribute":"f8","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":78,"match":{"attribute":"f9","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":63,"match":{"category":"D"},"notMatch":{"attribute":"f8","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":92,"match":{"attribute":"f12","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":73.7,"match":{"attribute":"f6","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":93,"match":{"category":"U"},"notMatch":{"category":"D"},"matchedCount":1,"notMatchedCount":3},"notMatch":{"category":"D"},"matchedCount":4,"notMatchedCount":39},"notMatch":{"attribute":"f12","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":55.9,"match":{"attribute":"f14","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":100,"match":{"category":"D"},"notMatch":{"attribute":"f3","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":37,"match":{"attribute":"f4","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":62,"match":{"attribute":"f13","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":28.77035511,"match":{"attribute":"f8","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":80,"match":{"attribute":"f19","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":4,"match":{"category":"U"},"notMatch":{"category":"D"},"matchedCount":5,"notMatchedCount":1},"notMatch":{"category":"D"},"matchedCount":6,"notMatchedCount":2},"notMatch":{"attribute":"f13","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":21.16627296,"match":{"category":"D"},"notMatch":{"category":"U"},"matchedCount":7,"notMatchedCount":1},"matchedCount":8,"notMatchedCount":8},"notMatch":{"category":"D"},"matchedCount":16,"notMatchedCount":5},"notMatch":{"category":"U"},"matchedCount":21,"notMatchedCount":3},"matchedCount":11,"notMatchedCount":24},"notMatch":{"category":"D"},"matchedCount":35,"notMatchedCount":13},"matchedCount":43,"notMatchedCount":48},"matchedCount":60,"notMatchedCount":91},"notMatch":{"attribute":"f5","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":55,"match":{"category":"D"},"notMatch":{"attribute":"f2","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":98,"match":{"attribute":"f12","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":40.6,"match":{"category":"D"},"notMatch":{"attribute":"f12","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":40.4,"match":{"category":"U"},"notMatch":{"category":"D"},"matchedCount":1,"notMatchedCount":6},"matchedCount":132,"notMatchedCount":7},"notMatch":{"attribute":"f19","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":60,"match":{"attribute":"f6","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":33,"match":{"attribute":"f13","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":23.67112634,"match":{"category":"D"},"notMatch":{"category":"U"},"matchedCount":11,"notMatchedCount":1},"notMatch":{"attribute":"f19","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":71,"match":{"category":"U"},"notMatch":{"category":"D"},"matchedCount":3,"notMatchedCount":1},"matchedCount":12,"notMatchedCount":4},"notMatch":{"attribute":"f7","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":100,"match":{"category":"U"},"notMatch":{"attribute":"f7","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":6,"match":{"attribute":"f20","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":65,"match":{"attribute":"f10","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":55,"match":{"category":"D"},"notMatch":{"category":"U"},"matchedCount":2,"notMatchedCount":1},"notMatch":{"category":"D"},"matchedCount":3,"notMatchedCount":57},"notMatch":{"attribute":"f8","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":72,"match":{"category":"D"},"notMatch":{"category":"U"},"matchedCount":1,"notMatchedCount":1},"matchedCount":60,"notMatchedCount":2},"matchedCount":1,"notMatchedCount":62},"matchedCount":16,"notMatchedCount":63},"matchedCount":139,"notMatchedCount":79},"matchedCount":231,"notMatchedCount":218},"matchedCount":151,"notMatchedCount":449},"notMatch":{"attribute":"f2","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":90,"match":{"attribute":"f8","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":97,"match":{"category":"D"},"notMatch":{"attribute":"f13","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":26.62517606,"match":{"attribute":"f3","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":88,"match":{"attribute":"f12","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":47.5,"match":{"category":"D"},"notMatch":{"attribute":"f2","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":94,"match":{"category":"U"},"notMatch":{"category":"D"},"matchedCount":1,"notMatchedCount":1},"matchedCount":73,"notMatchedCount":2},"notMatch":{"attribute":"f6","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":28,"match":{"attribute":"f21","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":8,"match":{"attribute":"f6","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":60,"match":{"attribute":"f5","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":99,"match":{"category":"U"},"notMatch":{"attribute":"f2","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":93,"match":{"category":"D"},"notMatch":{"attribute":"f10","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":37,"match":{"attribute":"f13","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":27.90778466,"match":{"attribute":"f7","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":40,"match":{"attribute":"f13","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":33.48316326,"match":{"attribute":"f2","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":91,"match":{"category":"U"},"notMatch":{"category":"D"},"matchedCount":3,"notMatchedCount":2},"notMatch":{"attribute":"f16","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":10,"match":{"category":"D"},"notMatch":{"category":"U"},"matchedCount":15,"notMatchedCount":1},"matchedCount":5,"notMatchedCount":16},"notMatch":{"category":"D"},"matchedCount":21,"notMatchedCount":21},"notMatch":{"attribute":"f11","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":57,"match":{"category":"D"},"notMatch":{"category":"U"},"matchedCount":2,"notMatchedCount":3},"matchedCount":42,"notMatchedCount":5},"notMatch":{"category":"D"},"matchedCount":47,"notMatchedCount":24},"matchedCount":75,"notMatchedCount":71},"matchedCount":2,"notMatchedCount":146},"notMatch":{"attribute":"f3","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":14,"match":{"attribute":"f12","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":40,"match":{"attribute":"f11","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":27,"match":{"attribute":"f20","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":41,"match":{"attribute":"f9","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":83,"match":{"category":"U"},"notMatch":{"attribute":"f21","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":63,"match":{"attribute":"f13","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":31.09769552,"match":{"attribute":"f3","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":22,"match":{"category":"D"},"notMatch":{"category":"U"},"matchedCount":5,"notMatchedCount":1},"notMatch":{"category":"U"},"matchedCount":6,"notMatchedCount":2},"notMatch":{"category":"D"},"matchedCount":8,"notMatchedCount":12},"matchedCount":4,"notMatchedCount":20},"notMatch":{"attribute":"f3","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":71,"match":{"attribute":"f15","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":6,"match":{"category":"D"},"notMatch":{"category":"U"},"matchedCount":6,"notMatchedCount":2},"notMatch":{"category":"D"},"matchedCount":8,"notMatchedCount":37},"matchedCount":24,"notMatchedCount":45},"notMatch":{"attribute":"f17","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":69,"match":{"category":"D"},"notMatch":{"attribute":"f6","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":37,"match":{"attribute":"f17","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":65,"match":{"category":"U"},"notMatch":{"attribute":"f8","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":67,"match":{"category":"D"},"notMatch":{"attribute":"f6","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":53,"match":{"category":"U"},"notMatch":{"category":"D"},"matchedCount":2,"notMatchedCount":2},"matchedCount":8,"notMatchedCount":4},"matchedCount":3,"notMatchedCount":12},"notMatch":{"category":"U"},"matchedCount":15,"notMatchedCount":3},"matchedCount":5,"notMatchedCount":18},"matchedCount":69,"notMatchedCount":23},"notMatch":{"category":"U"},"matchedCount":92,"notMatchedCount":2},"notMatch":{"category":"D"},"matchedCount":94,"notMatchedCount":20},"matchedCount":148,"notMatchedCount":114},"notMatch":{"attribute":"f8","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":57,"match":{"category":"D"},"notMatch":{"attribute":"f13","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":29.40974895,"match":{"attribute":"f13","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":34.09936461,"match":{"attribute":"f8","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":26,"match":{"category":"U"},"notMatch":{"category":"D"},"matchedCount":3,"notMatchedCount":1},"notMatch":{"attribute":"f19","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":12,"match":{"category":"D"},"notMatch":{"category":"U"},"matchedCount":13,"notMatchedCount":1},"matchedCount":4,"notMatchedCount":14},"notMatch":{"attribute":"f11","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":64,"match":{"category":"U"},"notMatch":{"category":"D"},"matchedCount":5,"notMatchedCount":1},"matchedCount":18,"notMatchedCount":6},"matchedCount":9,"notMatchedCount":24},"matchedCount":262,"notMatchedCount":33},"notMatch":{"attribute":"f20","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":30,"match":{"category":"D"},"notMatch":{"attribute":"f8","predicate":"_$$ND_FUNC$$_function (a, b) { return a >= b }","predicateName":">=","pivot":13,"match":{"category":"D"},"notMatch":{"category":"U"},"matchedCount":63,"notMatchedCount":2},"matchedCount":63,"notMatchedCount":65},"matchedCount":295,"notMatchedCount":128},"matchedCount":75,"notMatchedCount":423},"notMatch":{"category":"D"},"matchedCount":498,"notMatchedCount":172},"matchedCount":37,"notMatchedCount":670},"notMatch":{"category":"D"},"matchedCount":707,"notMatchedCount":975},"matchedCount":600,"notMatchedCount":1682},"notMatch":{"category":"D"},"matchedCount":2282,"notMatchedCount":2785},"notMatch":{"category":"U"},"matchedCount":5067,"notMatchedCount":4851}}`

// Building Decision Tree
var decisionTree = new dt.DecisionTree(config);

let count = 0, cc = 0, wc = 0
test.forEach(t => {
  let isCorrect = false
  let r = decisionTree.predict(t)
  count++
  if (r == t.label) { cc++; isCorrect = true }
  else wc++
  console.log(`count: ${count}, t: ${r}, o: ${t.label}, ac: ${(cc*100/count).toFixed(1)} ic: ${(isCorrect)?"Correct":"Wrong"}`)
})

let a = sr.serialize(decisionTree)
console.log(a)

// let decisionTree = sr.unserialize(decisionTreeString)
// count = 0, cc = 0, wc = 0
// test.forEach(t => {
//   let isCorrect = false
//   let r = predict(decisionTree.root, t)
//   count++
//   if (r == t.label) { cc++; isCorrect = true }
//   else wc++
//   console.log(`count: ${count}, t: ${r}, o: ${t.label}, ac: ${(cc*100/count).toFixed(1)} ic: ${(isCorrect)?"Correct":"Wrong"}`)
// })
